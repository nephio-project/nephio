// Copyright 2022-2023 The Nephio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packageservice "github.com/nephio-project/edge-status-aggregator/packageservice"
	util "github.com/nephio-project/edge-status-aggregator/util"
)

// MockPackageServiceInterface is a mock of PackageServiceInterface interface.
type MockPackageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPackageServiceInterfaceMockRecorder
}

// MockPackageServiceInterfaceMockRecorder is the mock recorder for MockPackageServiceInterface.
type MockPackageServiceInterfaceMockRecorder struct {
	mock *MockPackageServiceInterface
}

// NewMockPackageServiceInterface creates a new mock instance.
func NewMockPackageServiceInterface(ctrl *gomock.Controller) *MockPackageServiceInterface {
	mock := &MockPackageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPackageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageServiceInterface) EXPECT() *MockPackageServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateDeployPackage mocks base method.
func (m *MockPackageServiceInterface) CreateDeployPackage(ctx context.Context, contents map[string]string, nc util.NamingContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployPackage", ctx, contents, nc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployPackage indicates an expected call of CreateDeployPackage.
func (mr *MockPackageServiceInterfaceMockRecorder) CreateDeployPackage(ctx, contents, nc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployPackage", reflect.TypeOf((*MockPackageServiceInterface)(nil).CreateDeployPackage), ctx, contents, nc)
}

// CreateNFDeployActuators mocks base method.
func (m *MockPackageServiceInterface) CreateNFDeployActuators(ctx context.Context, nc util.NamingContext, key packageservice.VendorNFKey) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNFDeployActuators", ctx, nc, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateNFDeployActuators indicates an expected call of CreateNFDeployActuators.
func (mr *MockPackageServiceInterfaceMockRecorder) CreateNFDeployActuators(ctx, nc, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNFDeployActuators", reflect.TypeOf((*MockPackageServiceInterface)(nil).CreateNFDeployActuators), ctx, nc, key)
}

// DeleteDeployPackage mocks base method.
func (m *MockPackageServiceInterface) DeleteDeployPackage(ctx context.Context, nc util.NamingContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployPackage", ctx, nc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployPackage indicates an expected call of DeleteDeployPackage.
func (mr *MockPackageServiceInterfaceMockRecorder) DeleteDeployPackage(ctx, nc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployPackage", reflect.TypeOf((*MockPackageServiceInterface)(nil).DeleteDeployPackage), ctx, nc)
}

// GetNFProfiles mocks base method.
func (m *MockPackageServiceInterface) GetNFProfiles(ctx context.Context, req []packageservice.GetResourceRequest, nc util.NamingContext) (map[int][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFProfiles", ctx, req, nc)
	ret0, _ := ret[0].(map[int][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFProfiles indicates an expected call of GetNFProfiles.
func (mr *MockPackageServiceInterfaceMockRecorder) GetNFProfiles(ctx, req, nc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFProfiles", reflect.TypeOf((*MockPackageServiceInterface)(nil).GetNFProfiles), ctx, req, nc)
}

// GetVendorExtensionPackage mocks base method.
func (m *MockPackageServiceInterface) GetVendorExtensionPackage(ctx context.Context, nc util.NamingContext, key packageservice.VendorNFKey) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorExtensionPackage", ctx, nc, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorExtensionPackage indicates an expected call of GetVendorExtensionPackage.
func (mr *MockPackageServiceInterfaceMockRecorder) GetVendorExtensionPackage(ctx, nc, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorExtensionPackage", reflect.TypeOf((*MockPackageServiceInterface)(nil).GetVendorExtensionPackage), ctx, nc, key)
}
